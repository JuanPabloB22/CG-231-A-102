<!DOCTYPE html>
<html>
    <head>
        <title>Titulo</title>
        <style>
            html, body { margin: 0; padding: 0; overflow: hidden; }
            #text {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                color: #FFFFFF;
            }
        </style>
    </head>
    <body>
        <div id="text">JUAN PABLO BOHÓRQUEZ PANADER<br/>
            CODIGO: 6000598<br/>
            EJERCICIO TRANSFORMACIONES<br/>
        </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script>
    
        var lado = 60;
        function cubo(posini,lado,color,textura ){
            var vertices = [   

            new THREE.Vector3(lado , lado , lado ),
            new THREE.Vector3(lado,0, lado),
            new THREE.Vector3(lado,0, 0),
            new THREE.Vector3(lado,lado, 0),
            new THREE.Vector3(lado , lado , lado ),
            new THREE.Vector3(0 , lado , lado ),
            new THREE.Vector3(0 , 0, lado ),
            new THREE.Vector3(lado , 0, lado ),//Hasta aca dos caras laterales


            new THREE.Vector3(lado , 0, 0),
            new THREE.Vector3(0 , 0, 0),            
            new THREE.Vector3(0 , 0, lado ), //Vertices laterales arriba esquina origen

            new THREE.Vector3(0 , lado, lado ),
            new THREE.Vector3(0,lado ,0 ),
            new THREE.Vector3(lado, lado,0 ),//Vertices laterales abajo esquina origen

            
            new THREE.Vector3(0 , 0, 0 ),
            new THREE.Vector3(0 , lado, 0 )  //Union esquina origen abajo con la de arriba         

            ];


            var geometry = new THREE.Geometry();
            geometry.vertices = vertices;
            geometry.computeVertexNormals();
            var material = new THREE.LineBasicMaterial({ color: color });
            var cube = new THREE.Line(geometry, material);
            cube.position.set(posini[0], posini[1], posini[2]);
            return cube;
        }

                        //Propiedades Three.js// 
        // Escena
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);    
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);

        var size = 700;
        var arrowSize = 40;
        var divisions = 20;
        var origin = new THREE.Vector3( 0, 0, 0 );
        var x = new THREE.Vector3( 1, 0, 0 );
        var y = new THREE.Vector3( 0, 1, 0 );
        var z = new THREE.Vector3( 0, 0, 1 );
        var color2 = new THREE.Color( 0x333333 );  /// 0x333333
        var colorR = new THREE.Color( 0xAA0000 );
        var colorG = new THREE.Color( 0x00AA00 );
        var colorB = new THREE.Color( 0x0000AA );

        //Creación de la rejilla
        var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2);

        //Flechas
        var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
        var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorB );
        var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorG );

        //Cámara
        camera.position.x = 150; //Cuando modifico me permite mover la camara en cualquier dirección
        camera.position.y = 200;
        camera.position.z = 400;
        camera.lookAt(scene.position);
        document.body.appendChild(renderer.domElement);


                                    //PROPIEDADES DE LOS CUBOS//
        //PARAMETROS CUBOS
        
        var color = 0xff0000;
        var material = new THREE.LineBasicMaterial({ color: color });
        var cubito = cubo([0,0,0],lado,0xff0000,material);
        var cubitoT = cubo([0,0,0],lado,0xffa500,material);
        var cubitoE = cubo([0,0,0],lado,0x0000ff,material);
        var cubitoR = cubo([0,0,0],lado,0x0ff00,material);

        //Matriz de traslación
        var MatrizT = new THREE.Matrix4();
        MatrizT.set( 1,0,0,2*lado,
                    0,1,0,0,
                    0,0,1,0,
                    0,0,0,1);
                    cubitoT.applyMatrix(MatrizT);

        //Matriz de Escala
        var MatrizE = new THREE.Matrix4();
        MatrizE.set(1.5,0,0,0,   //1.5  por que es 150/entre 100
                    0,1.5,0,0,
                    0,0,1.5,0,
                    0,0,0,1);

                    cubitoE.applyMatrix(MatrizE);

        //Matriz Rotación
        var MatrizR = new THREE.Matrix4();
        var alpha = 45*Math.PI/180; //Alpha lo toma en radianes, hay que multiplicar*PI y / en 180
        var cs = Math.cos(alpha);
        var ss = Math.sin(alpha);

        MatrizR.set(1,0,0,0,
                    0,cs,-ss, 0,
                    0,ss,cs,0,
                    0,0,0,1);

                    cubitoR.applyMatrix(MatrizR);

        document.body.appendChild(renderer.domElement);        

        // Agregar las ayudas y cubos al escenario 
        scene.add(gridHelperXZ);
	    scene.add(arrowX);	
		scene.add(arrowY);	
		scene.add(arrowZ);
        scene.add(cubito);
        scene.add(cubitoT);
        scene.add(cubitoE);
        scene.add(cubitoR);

        renderer.render(scene,camera)

    </script>
  </body>

</html>